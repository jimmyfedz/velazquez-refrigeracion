{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","QUERY","gql","_templateObject","Object","taggedTemplateLiteral","_useQuery","useQuery","data","loading","error","console","log","concat","react_default","a","createElement","users","map","e","i","key","first_name","style","backgroundColor","color","fontSize","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","headers","content-type","x-hasura-admin-secret","cache","InMemoryCache","ReactDOM","createRoot","document","getElementById","render","StrictMode","ApolloProvider","src_App"],"mappings":"6PA8BeA,MA1Bf,WACE,IAAMC,EAAQC,YAAHC,MAAAC,OAAAC,EAAA,EAAAD,CAAA,4GADEE,EAUkBC,YAASN,GAAjCO,EAVMF,EAUNE,KAAMC,EAVAH,EAUAG,QAASC,EAVTJ,EAUSI,MAEtB,OADAC,QAAQC,IAAR,SAAAC,OAAqBL,EAArB,eAAAK,OAAuCJ,EAAvC,aAAAI,OAA0DH,IAExDI,EAAAC,EAAAC,cAAA,YACIP,GAAWD,EAAOM,EAAAC,EAAAC,cAAA,WAClBF,EAAAC,EAAAC,cAAA,UACGR,EAAKS,MAAMC,IAAI,SAACC,EAAEC,GAAH,OAAON,EAAAC,EAAAC,cAAA,MAAIK,IAAKD,GAAID,EAAEG,eAFtB,KAGFR,EAAAC,EAAAC,cAAA,OAAKO,MAAO,CAACC,gBAAiB,QAC9CV,EAAAC,EAAAC,cAAA,MAAIO,MAAO,CAACE,MAAO,QAASC,SAAU,SAAtC,kBCVOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAX,EAAA,GAAAY,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,8BCIRW,EAAS,IAAIC,IAAa,CAC9BC,IAAK,gCACLC,QAAS,CACPC,eAAgB,mBAChBC,wBAAyB,gBAE3BC,MAAO,IAAIC,MAEAC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHrC,EAAAC,EAAAC,cAACF,EAAAC,EAAMqC,WAAP,KACAtC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAgBd,OAAQA,GACtBzB,EAAAC,EAAAC,cAACsC,EAAD,OAFF,MAUF3B","file":"static/js/main.9b251c72.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport {useQuery, gql} from '@apollo/client';\n\nfunction App() {\n  const QUERY = gql`query MyQuery {\n    users {\n      age\n      first_name\n      id\n      last_name\n    }\n  }\n  `;\n  const {data, loading, error} = useQuery(QUERY);\n  console.log(`data: ${data}, loading: ${loading}, error: ${error}`);\n  return (\n    <div>\n      {!loading && data ? <div>\n        <ul>\n          {data.users.map((e,i)=><li key={i}>{e.first_name}</li>)}\n          </ul> </div>: <div style={{backgroundColor: 'red'}}>\n        <h2 style={{color: 'white', fontSize: '40px'}}>\n          Loading ...\n        </h2>\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: 'http://34.70.32.73/v1/graphql',\n  headers: {\n    \"content-type\": \"application/json\",\n    \"x-hasura-admin-secret\": \"4SaLFk^rvx5^\"\n},\n  cache: new InMemoryCache()\n});\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}